/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusTrashJob -p dbustrashjob com.deepin.filemanager.Backend.Operations.TrashJob.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSTRASHJOB_H_1437722517
#define DBUSTRASHJOB_H_1437722517

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.filemanager.Backend.Operations.TrashJob
 */
class DBusTrashJob: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.filemanager.Backend.Operations.TrashJob")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString &prop, changedProps.keys()) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticServerPath()
    { return "com.deepin.filemanager.Backend.Operations"; }
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.Backend.Operations.TrashJob"; }

public:
    DBusTrashJob(const QString &path, QObject *parent = 0);

    ~DBusTrashJob();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Abort()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Abort"), argumentList);
    }

    inline QDBusPendingReply<> Execute()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Execute"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Aborted();
    void Deleting(const QString &in0);
    void Done();
    void ProcessedAmount(qlonglong in0, ushort in1);
    void Trashing(const QString &in0);
// begin property changed signals
};

namespace com {
  namespace deepin {
    namespace filemanager {
      namespace Backend {
        namespace Operations {
          typedef ::DBusTrashJob TrashJob;
        }
      }
    }
  }
}
#endif
