/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusDockEntry -p dbusdockentry dde-dock-entry-v1.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSDOCKENTRY_H_1464922075
#define DBUSDOCKENTRY_H_1464922075

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

typedef QMap<quint32, QString> WindowDict;

/*
 * Proxy class for interface dde.dock.Entry
 */
class DBusDockEntry: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.dde.daemon.Dock.Entry")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString &prop, changedProps.keys()) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.dde.daemon.Dock.Entry"; }

public:
    explicit DBusDockEntry(const QString &path, QObject *parent = 0);

    ~DBusDockEntry();

    Q_PROPERTY(bool IsActive READ active NOTIFY ActiveChanged)
    inline bool active() const
    { return qvariant_cast< bool >(property("IsActive")); }

    Q_PROPERTY(WindowDict WindowTitles READ titles NOTIFY TitlesChanged)
    inline WindowDict titles() const
    { return qvariant_cast< WindowDict >(property("WindowTitles")); }

    Q_PROPERTY(QString Id READ id NOTIFY IdChanged)
    inline QString id() const
    { return qvariant_cast< QString >(property("Id")); }

    Q_PROPERTY(QString Title READ title NOTIFY TitleChanged)
    inline QString title() const
    { return qvariant_cast< QString >(property("Title")); }

    Q_PROPERTY(QString Icon READ icon NOTIFY IconChanged)
    inline QString icon() const
    { return qvariant_cast< QString >(property("Icon")); }

    Q_PROPERTY(QString Menu READ menu NOTIFY MenuChanged)
    inline QString menu() const
    { return qvariant_cast< QString >(property("Menu")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Activate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Activate"), argumentList);
    }

    inline QDBusPendingReply<> Activate1()
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(qint32(0)) << QVariant::fromValue(qint32(0)) << QVariant::fromValue(quint32(0));
        return asyncCallWithArgumentList(QStringLiteral("Activate"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
void ActiveChanged();
void TitlesChanged();
void DataChanged();
void IdChanged();
void TitleChanged();
void IconChanged();
void MenuChanged();
};

namespace dde {
  namespace dock {
    typedef ::DBusDockEntry Entry;
  }
}
#endif
